// Generated by gencpp from file br_behavior_engine/Events.msg
// DO NOT EDIT!


#ifndef BR_BEHAVIOR_ENGINE_MESSAGE_EVENTS_H
#define BR_BEHAVIOR_ENGINE_MESSAGE_EVENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace br_behavior_engine
{
template <class ContainerAllocator>
struct Events_
{
  typedef Events_<ContainerAllocator> Type;

  Events_()
    : video(false)
    , wifi(false)  {
    }
  Events_(const ContainerAllocator& _alloc)
    : video(false)
    , wifi(false)  {
  (void)_alloc;
    }



   typedef uint8_t _video_type;
  _video_type video;

   typedef uint8_t _wifi_type;
  _wifi_type wifi;





  typedef boost::shared_ptr< ::br_behavior_engine::Events_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::br_behavior_engine::Events_<ContainerAllocator> const> ConstPtr;

}; // struct Events_

typedef ::br_behavior_engine::Events_<std::allocator<void> > Events;

typedef boost::shared_ptr< ::br_behavior_engine::Events > EventsPtr;
typedef boost::shared_ptr< ::br_behavior_engine::Events const> EventsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::br_behavior_engine::Events_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::br_behavior_engine::Events_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::br_behavior_engine::Events_<ContainerAllocator1> & lhs, const ::br_behavior_engine::Events_<ContainerAllocator2> & rhs)
{
  return lhs.video == rhs.video &&
    lhs.wifi == rhs.wifi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::br_behavior_engine::Events_<ContainerAllocator1> & lhs, const ::br_behavior_engine::Events_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace br_behavior_engine

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::br_behavior_engine::Events_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::br_behavior_engine::Events_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::br_behavior_engine::Events_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::br_behavior_engine::Events_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::br_behavior_engine::Events_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::br_behavior_engine::Events_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::br_behavior_engine::Events_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99fe8136a00e34efa272b67df2febcbb";
  }

  static const char* value(const ::br_behavior_engine::Events_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99fe8136a00e34efULL;
  static const uint64_t static_value2 = 0xa272b67df2febcbbULL;
};

template<class ContainerAllocator>
struct DataType< ::br_behavior_engine::Events_<ContainerAllocator> >
{
  static const char* value()
  {
    return "br_behavior_engine/Events";
  }

  static const char* value(const ::br_behavior_engine::Events_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::br_behavior_engine::Events_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool video\n"
"bool wifi\n"
;
  }

  static const char* value(const ::br_behavior_engine::Events_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::br_behavior_engine::Events_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.video);
      stream.next(m.wifi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Events_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::br_behavior_engine::Events_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::br_behavior_engine::Events_<ContainerAllocator>& v)
  {
    s << indent << "video: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.video);
    s << indent << "wifi: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wifi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BR_BEHAVIOR_ENGINE_MESSAGE_EVENTS_H
