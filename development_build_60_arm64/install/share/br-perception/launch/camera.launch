<launch>

  <!-- Command Line Arguments -->
  <arg name="simulation_mode" default="false"/>               <!-- Allow simulation to launch camera without the hardware part (just use image proc) -->
  <arg name="respawn" default="false"/>

  <node name="gscam_udp" type="gscam.py" pkg="br-perception"/> <!-- Launches gstreamer pipeline to enable tee for low latency h264 streaming-->

  <node pkg="nodelet" type="nodelet" name="vision_nodelet"  args="manager" output="screen"/> <!-- nodelet for zero copy transfer of images between image processing nodes -->

  <!-- The left camera is the main camera used for teleop and image recognition -->
  <group ns="stereo">

    <!-- Start stereo image proc node -->

    <!-- Basic processing for left camera -->
    <include file="$(find image_proc)/launch/image_proc.launch" ns="left">
      <arg name="manager" value="/vision_nodelet" />
    </include>

    <!-- Basic processing for right camera-->
    <include file="$(find image_proc)/launch/image_proc.launch" ns="right">
      <arg name="manager" value="/vision_nodelet" />
    </include>

    <!-- Disparity image -->
    <node pkg="nodelet" type="nodelet" name="disparity" args="load stereo_image_proc/disparity /vision_nodelet --no-bond" >
      <param name="approximate_sync" value="true" />
    </node>

    <!-- PointCloud2 -->
    <node pkg="nodelet" type="nodelet" name="point_cloud2"
          args="load stereo_image_proc/point_cloud2 /vision_nodelet --no-bond">
      <param name="approximate_sync" value="true" />
    </node>

    <!-- run laserscan_to_pointcloud nodelet -->
    <node pkg="nodelet" type="nodelet" name="pointcloud_to_laserscan" args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet /vision_nodelet">
        <remap from="cloud_in" to="points2"/>
        <remap from="scan" to="scan"/>
        <rosparam>
            target_frame: stereo/left_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -0.1
            max_height: 1.0

            angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing, thread number governed by nodelet manager
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 0
        </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="laserscan_to_pointcloud" args="load pointcloud_to_laserscan/laserscan_to_pointcloud_nodelet /vision_nodelet --no-bond">
      <remap from="cloud" to="points2"/>
      <param name="min_height" value="-0.1"/>
      <param name="max_height" value="2"/>
      <param name="target_frame" value="stereo/left_link"/>
      <param name="range_max" value="5"/>
      <param name="range_min" value="0.3"/>
    </node>

    <!-- Disparity to depth image (check available nodelets with `rosrun nodelet declared_nodelets`) -->
    <!-- This nodelet currently does not work -->
<!--    <node pkg="nodelet" type="nodelet" name="disparity_to_depth" args="load disparity_to_depth/DisparityToDepth /vision_nodelet &#45;&#45;no-bond" >-->
<!--      <param name="approximate_sync" value="true" />-->
<!--    </node>-->

    <!-- Start the cameras -->

    <!-- Define the GSCAM pipeline -->
    <env name="GSCAM_CONFIG" value="gst-launch-1.0 udpsrc port=5000 ! application/x-rtp,encoding-name=JPEG,payload=26 ! rtpjpegdepay ! jpegdec ! videoconvert" />

    <!-- Start the GSCAM node -->
    <node unless="$(arg simulation_mode)" pkg="gscam" type="gscam" name="$(arg cam_name)" respawn="$(arg respawn)" respawn_delay="10">
      <param name="camera_name" value="right" />
      <param name="frame_id" value="stereo/right_link_optical" />
      <param name="sync_sink" value="true" /> <!-- Synchronize the app sink. Setting this to false may resolve problems with sub-par frame rates. -->
      <param name="camera_info_url" value="package://br-perception/config/ost.yaml" />
    </node>

    <!--  <node pkg="nodelet" type="nodelet"
    name="GSCamNodelet"
    args="load gscam/GSCamNodelet standalone_nodelet"
    output="screen">
    <param name="camera_name" value="default"/>
    <param name="camera_info_url" value="package://gscam/examples/uncalibrated_parameters.ini"/>
    <param name="gscam_config" value="v4l2src device=$(arg DEVICE) ! video/x-raw-rgb,framerate=$(arg FPS) ! ffmpegcolorspace"/>
    <param name="frame_id" value="/v4l_frame"/>
    <param name="sync_sink" value="true"/>
  </node>   -->

        <param name="/stereo/right/image_rect/compressed/jpeg_quality" value="10"/>

    <!-- The right camera is solely used to provide another frame for the stereo camera processing -->
    <!-- Make arguments available to parameter server -->
    <arg name="cam_name"  default="left" />             <!-- The name of the camera (corresponding to the camera info) -->
    <arg name="frame_id"  default="/$(arg cam_name)_link" />    <!-- The TF frame ID. -->
    <arg name="sync_sink" default="true" />

    <!-- Define the GSCAM pipeline -->
    <env name="GSCAM_CONFIG" value="nvarguscamerasrc sensor-id=1 ! video/x-raw(memory:NVMM), width=(int)1280, height=(int)720, format=(string)NV12, framerate=(fraction)15/1 ! nvvidconv flip-method=2 ! video/x-raw, format=(string)BGRx ! videoconvert" />

    <!-- Start the GSCAM node -->
    <node unless="$(arg simulation_mode)" pkg="gscam" type="gscam" name="$(arg cam_name)" respawn="$(arg respawn)" respawn_delay="10">
      <param name="camera_name" value="left" />
      <param name="frame_id" value="stereo/left_link_optical" />
      <param name="sync_sink" value="true" />  <!-- Synchronize the app sink. Setting this to false may resolve problems with sub-par frame rates. -->
      <param name="camera_info_url" value="package://br-perception/config/ost.yaml" />
    </node>
  </group>

</launch>
